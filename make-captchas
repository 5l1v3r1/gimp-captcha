#!/usr/bin/env python
# -*- coding: utf-8 -*-

'''make-captchas â€• Create new CAPTCHAS

Runs the following command:

gimp --no-interface --no-data --console-messages \
  --batch '(python-fu-captcha-generate 1 "DIRECTORY" NUMBER) (gimp-quit 1)'

where:
   DIRECTORY is the directory to store generated captchas in
   NUMBER    is the number of captchas to create
'''

from __future__ import print_function
from datetime import datetime

import argparse
import glob
import logging
import os
import shutil
import sys

DEFAULT_CAPTCHA_DIR = os.path.join(os.getcwd(), "captchas")
CAPTCHA_FILE_EXT = '.jpg'


log = logging.getLogger('captchas')
log.addHandler(logging.StreamHandler(sys.stdout))
log.setLevel(30)


def getArgParser():
    parser = argparse.ArgumentParser(prog="make-captchas",
                                     description="CAPTCHA generator",
                                     add_help=True)
    parser.add_argument('-n', '--number', type=int, default=100,
                        help="Number of CAPTCHAs to create")
    parser.add_argument('-d', '--directory', type=str,
                        default=DEFAULT_CAPTCHA_DIR,
                        help="The directory to create CAPTCHAs in")
    return parser

def findGimpDir():
    homedir=os.path.expanduser("~/.gimp")
    gimpdir=glob.glob(homedir + "*")
    if not len(gimpdir) > 0:
        return SystemExit("Could not find Gimp data directory in $HOME")
    gimpdir = gimpdir[0]
    log.debug("Using Gimp data directory %r" % gimpdir)
    return gimpdir

def copyPluginToGimpDir(gimpdir=None):
    plugin = os.path.join(os.getcwd(), "captcha.py")

    if not gimpdir:
        return SystemExit("Cannot copy %r to %r" % (plugin, gimpdir))

    plugindir = os.path.join(gimpdir, "plug-ins")

    if not os.path.isdir(os.path.expanduser(plugindir)):
        print("%r does not exist. Creating..." % plugindir)
        os.makedirs(plugindir)
    log.debug("Copying %r to %r..." % (plugin, plugindir))
    shutil.copy(plugin, plugindir)

def createGimpShellScript(N, directory, scriptfile=".gimp-captcha-script.sh"):
    gimpcmd = """\
#!/bin/bash

gimp --no-interface --no-data --console-messages \
--batch '(python-fu-captcha-generate 1 "{0}" {1}) (gimp-quit 1)'
""".format(str(directory), int(N))

    gimpShellScript = os.path.join(os.getcwd(), scriptfile)
    with open(gimpShellScript, 'w') as fh:
        fh.write(gimpcmd)
        fh.flush()
    os.chmod(gimpShellScript, 0744)

    return gimpShellScript

def backupCaptchaDir(directory):
    if os.path.isdir(directory):
        today = datetime.strftime(datetime.now(), "-%Y-%m-%d")
        bak = directory + today

        if os.path.isdir(bak):
            log.info("Adding new CAPTCHAs to backup dir: %r" % bak)
            fileglob = os.path.join(directory, "*" + CAPTCHA_FILE_EXT)
            captchas = glob.glob(fileglob)
            for captcha in captchas:
                shutil.move(captcha, bak)
        else:
            log.info("Backing up previously generated CAPTCHAs to %r..." % bak)
            shutil.move(directory, bak)

    if not os.path.isdir(directory):
        os.makedirs(directory)


def generateCaptchas(N=2000, directory='./captchas'):

    gimpdir = findGimpDir()
    copyPluginToGimpDir(gimpdir)
    backupCaptchaDir(directory)
    command = createGimpShellScript(N, directory)

    # shlcmd = []
    # shlcmd.append("/bin/bash")
    # shlcmd.append("-c")
    # shlcmd.append(gimpShellScript)
    # command = ' '.join(shlcmd)
    #
    # proc = subprocess.Popen(cmd,
    #                         stdin=subprocess.PIPE,
    #                         stdout=subprocess.PIPE,
    #                         stderr=subprocess.PIPE,
    #                         shell=True)
    # proc.wait()

    log.info("Generating %d CAPTCHAs..." % int(N))
    log.debug("Running script: %s" % command)

    returnCode = os.system(command)

    if returnCode == 0:
        log.info("Success!")
    else:
        log.error("Something went wrong... process exited with statuscode %d."
                  % returnCode)
    return returnCode


if __name__ == "__main__":
    parser = getArgParser()
    args = parser.parse_args()

    returnCode = 1
    if args.number:
        returnCode = generateCaptchas(N=args.number, directory=args.directory)
    exit(returnCode)
